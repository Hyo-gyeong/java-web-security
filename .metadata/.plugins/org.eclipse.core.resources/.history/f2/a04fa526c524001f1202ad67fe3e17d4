package sign;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Signature;
import java.security.SignatureException;
import java.util.Scanner;

import javax.crypto.NoSuchPaddingException;

public class verificationMode {
	public static String bytesToHex(byte[] bytes) {
		StringBuilder result = new StringBuilder();
		int i = 0;
		for (byte b : bytes) {
			if (i % 20 == 0) {
				result.append("\n");
			}
			result.append(String.format("%02X ", b));
			i++;
		}
		return result.toString();
	}
	
	public static PublicKey loadPublicKeyFromFile(String fileName) throws IOException, ClassNotFoundException {
        try (ObjectInputStream in = new ObjectInputStream(new FileInputStream("./src/pr01/"+fileName))) {
            return (PublicKey) in.readObject();
        }
    }
	
	public static PrivateKey loadPrivateKeyFromFile(String fileName) throws IOException, ClassNotFoundException {
        try (ObjectInputStream in = new ObjectInputStream(new FileInputStream("./src/pr01/"+fileName))) {
            return (PrivateKey) in.readObject();
        }
    }
	
	public static byte[] loadSignFromFile(String fileName) throws IOException, ClassNotFoundException {
        try (ObjectInputStream in = new ObjectInputStream(new FileInputStream("./src/pr01/"+fileName))) {
            return (byte[]) in.readObject();
        }
    }
	
	static byte[] readFromFile(String fname) throws IOException {
		byte[] result = new byte[128];
		try {
            FileInputStream in = new FileInputStream("./src/pr01/"+fname);
            int i = 0;
            int c;
            while((c = in.read()) != -1 ) {
            	result[i] = (byte)c; //읽은 바이트를 배열에 저장
                i++;
            }
            in.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
		return result;
	}
	
	public static boolean verify(PublicKey publicKey, byte[] inputBytes, byte[] signature) throws NoSuchAlgorithmException, InvalidKeyException, SignatureException, ClassNotFoundException, IOException, NoSuchPaddingException {	
		String signAlgorithm = "SHA1withRSA";
		
		Signature sig2 = Signature.getInstance(signAlgorithm);
		sig2.initVerify(publicKey); // Initialize the signer with public key
		sig2.update(inputBytes); // 입력한 값으로 업데이트 해주고
		boolean isVerified = sig2.verify(signature); // 파일에서 읽어온 해시값과 비교
		return isVerified;
	}

}
