// 컴퓨터학과, 20190975, 신효경
package key_manager;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;

import enums.Extension;
import enums.FilePath;
import enums.Message;
import exceptions.IdNotExistsException;


public class CreateSaveAsymKeys {
	private static StringBuilder sb;
	private static PublicKey publickey;
	private static PrivateKey privatekey;
	private static KeyPair keypair;
	
	public static boolean create(String pkId, String pubkId) throws IdNotExistsException {
		if (pkId == null || pubkId == null) {
			throw new IdNotExistsException(Message.ID_NOT_EXISTS.getMessage());
		}
		boolean ifPKSuccess = false;
		
		try (ifPKSuccess = createPublicKey(pubkId);){ // 공개&개인키 생성
				
				createPrivateKey(pkId);
			return true;
		} catch (NoSuchAlgorithmException e) {
			return false;
		}
	}
	
	public static void initKeyPair() throws NoSuchAlgorithmException {
		KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance("RSA");
		keyPairGen.initialize(1024);
		
		keypair = keyPairGen.generateKeyPair();
		publickey = keypair.getPublic();
		privatekey = keypair.getPrivate();
		
		deleteDirectory(new File(FilePath.PubK_DIRECTORY.getPath()));
		deleteDirectory(new File(FilePath.PK_DIRECTORY.getPath()));
	}

	private static void deleteDirectory(File directory) {
	    if (directory.exists()) {
	        File[] files = directory.listFiles();
	        if (files != null) {
	            for (File file : files) {
	            	file.delete(); // 파일 삭제
	            }
	        }
	    }
	}

	private static boolean createPublicKey(String id) throws NoSuchAlgorithmException, IOException {
		sb = new StringBuilder()
				.append(FilePath.PubK.getPath())
				.append(id)
				.append(Extension.KEY_EXT.getExtension());
		String publicPath = sb.toString();
		
		File publicFile = new File(publicPath);
		if (!publicFile.exists()) {
            try {
            	publicFile.createNewFile();
            } catch (IOException e) {
            	e.printStackTrace();
            	return false;
            }
        }	
		
		try (ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(publicPath))) {
            out.writeObject(publickey);
        } catch (IOException e) {
        	e.printStackTrace();
        	return false;
        }
		return true;
	}
	
	private static boolean createPrivateKey(String id) throws NoSuchAlgorithmException, IOException {
		sb = new StringBuilder()
				.append(FilePath.PK.getPath())
				.append(id)
				.append(Extension.KEY_EXT.getExtension());
		String privatePath = sb.toString();

		File privateFile = new File(privatePath);
		if (!privateFile.exists()) {
            try {
            	privateFile.createNewFile();
            } catch (IOException e) {
            	e.printStackTrace();
            	return false;
            }
        }
		
		try (ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(privatePath))) {
            out.writeObject(privatekey);
        } catch( IOException e) {
        	e.printStackTrace();
        	return false;
        }
		return true;
	}
}
